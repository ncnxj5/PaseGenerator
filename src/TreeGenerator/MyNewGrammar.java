/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammar.java */
package TreeGenerator;

import gui.MyGUI;

import java.util.ArrayList;

import STgenerator.Generator;
import mytree.MyTree;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants, MyNewGrammarConstants {/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();
  public class tokenstream
  {
        public ArrayList<String> list = new ArrayList<String>();
  }

  public MyNewGrammar(){};

public void compilerCall() throws Exception
  {

	    MyNewGrammar tmp = new MyNewGrammar();
	    tokenstream stream = tmp.new tokenstream();
	    tokenstream tokenStream = tmp.new tokenstream();
	    //MyNewGrammar parser = new MyNewGrammar(Utils.getStringStream(codeString+"@BOOM!"));
	    SimpleNode root = new SimpleNode(0);

	    Integer stop = 0;
	    MyTree mytree = new MyTree();
	    Generator myGenerator = new Generator();
	    SimpleNode oriRoot = new SimpleNode(0);
	    while (stop.equals(0))
	    {
	      //System.out.println("Reading from standard input...");
	      try
	      {
	        stream.list.clear();
	        SimpleNode rootNode = one_line(stream);
	        for(int i=0;i<stream.list.size();i++){
	        	tokenStream.list.add(stream.list.get(i)+"\r\n");
	        }
	        
	        if(stream.list.get(0).equals("@")){
	        	myGenerator.generateRoot(oriRoot);
	        	MyGUI.addStream(tokenStream.list);
	        	MyGUI.addRoot(oriRoot);
	        	MyGUI.outputTree();
	        	mytree.setTableManager(myGenerator);
	        	mytree.setRoot(MyGUI.getTree());
	        	mytree.tree2code();
	        	mytree.outputCodes();
	        	oriRoot.dump("");
	        	MyGUI.clearAll();
	            break;
	        }
	        else{
	        	oriRoot.jjtAddChild((SimpleNode)rootNode.children[0], oriRoot.jjtGetNumChildren());
	        }
	        
	      }
	      catch (Exception e)
	      {
	    	//e.printStackTrace();
	        //System.out.println("NOK.");
	        //System.out.println(e.getMessage());
	        //ReInit(System.in);
	    	throw e;
	      }
	      catch (Error e)
	      {
	        //System.out.println("Oops.");	
	        //System.out.println(e.getMessage());
	        throw e;
	      }
	    }
	    /*
	    System.out.println("Please input your file path");
	   	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    String path;
	    path = br.readLine();
	    File file = new File(path);
	    MyNewGrammar parser = new MyNewGrammar(new FileInputStream(file));
	    */
  }

  final public SimpleNode one_line(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) ROOT */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        define(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
    {if (true) return jjtn000;}
        break;
      case SYMBOL:
        call(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
        {if (true) return jjtn000;}
        break;
      case 39:
        let(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
    {if (true) return jjtn000;}
        break;
      case 24:
        jj_consume_token(24);
      stream.list.add("?");
        branch(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
        {if (true) return jjtn000;}
        break;
      case 32:
        loop(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
    {if (true) return jjtn000;}
        break;
      case 33:
        ret(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
    {if (true) return jjtn000;}
        break;
      case 25:
      case 34:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 25:
          jj_consume_token(25);
       stream.list.add("@");
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        boom(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
        {if (true) return jjtn000;}
        break;
      case 35:
        comment(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return jjtn000;}
        break;
      case 37:
        foreach(stream);
        jj_consume_token(23);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    stream.list.add("!");
        {if (true) return jjtn000;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void body(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) BODY */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
        case 24:
        case 32:
        case 33:
        case 34:
        case 35:
        case 37:
        case 39:
        case 41:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 24:
          jj_consume_token(24);
              stream.list.add("?");
          branch(stream);
          jj_consume_token(23);
                                                      stream.list.add("!");
          break;
        case 39:
          let(stream);
          jj_consume_token(23);
                         stream.list.add("!");
          break;
        case 41:
          define(stream);
          jj_consume_token(23);
                            stream.list.add("!");
          break;
        case 32:
          loop(stream);
          jj_consume_token(23);
                          stream.list.add("!");
          break;
        case 33:
          ret(stream);
          jj_consume_token(23);
                         stream.list.add("!");
          break;
        case 34:
          boom(stream);
          jj_consume_token(23);
                          stream.list.add("!");
          break;
        case 35:
          comment(stream);
          jj_consume_token(23);
                             stream.list.add("!");
          break;
        case 37:
          foreach(stream);
          jj_consume_token(23);
                             stream.list.add("!");
          break;
        case SYMBOL:
          call(stream);
          jj_consume_token(23);
                          stream.list.add("!");
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//correct parameter checking
  final public void call(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) CALL */
 SimpleNode jjtn000 = new SimpleNode(JJTCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
                  SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                 jjtn001.setText(t.image); stream.list.add(t.image);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(26);
        t = jj_consume_token(SYMBOL);
                  SimpleNode jjtn002 = new SimpleNode(JJTSYMBOL);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                 jjtn002.setText(t.image); stream.list.add(t.image); stream.list.add("->");
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
        }
      }
      jj_consume_token(B);
            stream.list.add("(");
      if (jj_2_1(2147483647)) {
        jj_consume_token(28);
      } else {
        ;
      }
      if (jj_2_2(1)) {
        term(stream);
      } else {
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(27);
              stream.list.add(",");
        term(stream);
      }
      jj_consume_token(C);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              stream.list.add(")");
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void branch(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) BRANCH */
  SimpleNode jjtn000 = new SimpleNode(JJTBRANCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(B);
            stream.list.add("(");
      expression(stream);
      jj_consume_token(C);
      jj_consume_token(30);
               stream.list.add(")");stream.list.add("{");
      body(stream);
      jj_consume_token(31);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         stream.list.add("}");
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void loop(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) LOOP */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(32);
      jj_consume_token(B);
                  stream.list.add("LOOP");stream.list.add("(");
      expression(stream);
      jj_consume_token(C);
      jj_consume_token(30);
               stream.list.add(")");stream.list.add("{");
      body(stream);
      jj_consume_token(31);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         stream.list.add("}");
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ret(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) RET */
  SimpleNode jjtn000 = new SimpleNode(JJTRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(33);
              stream.list.add("RET");
      term(stream);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void boom(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) BOOM */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(34);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               stream.list.add("BOOM");
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void comment(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) comment */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(35);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHARACTER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(CHARACTER);
      }
      jj_consume_token(36);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void foreach(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) #FOREACH( 3) */
 SimpleNode jjtn000 = new SimpleNode(JJTFOREACH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(37);
                  stream.list.add("FOREACH");
      t = jj_consume_token(SYMBOL);
                        SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                       jjtn001.setText(t.image);stream.list.add(t.image);
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
      }
      jj_consume_token(38);
      t = jj_consume_token(SYMBOL);
                            SimpleNode jjtn002 = new SimpleNode(JJTSYMBOL);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
      try {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                           jjtn002.setText(t.image);stream.list.add(t.image);
      } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
      }
      jj_consume_token(30);
      body(stream);
      jj_consume_token(31);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  3);
          }
    }
  }

  final public void let(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) LET */
  SimpleNode jjtn000 = new SimpleNode(JJTLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(39);
              stream.list.add("LET");
      variable(stream);
      jj_consume_token(40);
             stream.list.add("AS");
      if (jj_2_3(1)) {
        expression(stream);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          bulk(stream);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void bulk(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) BULK */
  SimpleNode jjtn000 = new SimpleNode(JJTBULK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(30);
      BulkAcceptValue(stream);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(27);
        BulkAcceptValue(stream);
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void define(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) DEF */
 SimpleNode jjtn000 = new SimpleNode(JJTDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(41);
      t = jj_consume_token(SYMBOL);
                             SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                            jjtn001.setText(t.image);stream.list.add("DEF");stream.list.add(t.image);
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case B:
        jj_consume_token(B);
              stream.list.add("(");
        if (jj_2_4(2147483647)) {
          jj_consume_token(28);
        } else {
          ;
        }
            SimpleNode jjtn009 = new SimpleNode(JJTPARAS);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
        try {
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SYMBOL:
            case 42:
            case 43:
            case 44:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_6;
            }
                  SimpleNode jjtn008 = new SimpleNode(JJTPARA);
                  boolean jjtc008 = true;
                  jjtree.openNodeScope(jjtn008);
            try {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 42:
                jj_consume_token(42);
                                SimpleNode jjtn002 = new SimpleNode(JJTNUM);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                try {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtc002 = false;
                               stream.list.add("NUM");
                } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002, true);
                                }
                }
                break;
              case 43:
                jj_consume_token(43);
                          SimpleNode jjtn003 = new SimpleNode(JJTFLOAT);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                         stream.list.add("FLOAT");
                } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                }
                break;
              case 44:
                jj_consume_token(44);
                              SimpleNode jjtn004 = new SimpleNode(JJTCHAR);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                try {
                              jjtree.closeNodeScope(jjtn004, true);
                              jjtc004 = false;
                             stream.list.add("CHARACTER");
                } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
                }
                break;
              case SYMBOL:
                t = jj_consume_token(SYMBOL);
                                SimpleNode jjtn005 = new SimpleNode(JJTSYMBOL);
                                boolean jjtc005 = true;
                                jjtree.openNodeScope(jjtn005);
                try {
                                jjtree.closeNodeScope(jjtn005, true);
                                jjtc005 = false;
                               jjtn005.setText(t.image);stream.list.add(t.image);
                } finally {
                                if (jjtc005) {
                                  jjtree.closeNodeScope(jjtn005, true);
                                }
                }
                break;
              default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 45:
                jj_consume_token(45);
                       SimpleNode jjtn006 = new SimpleNode(JJTARRAY);
                       boolean jjtc006 = true;
                       jjtree.openNodeScope(jjtn006);
                try {
                       jjtree.closeNodeScope(jjtn006, true);
                       jjtc006 = false;
                      stream.list.add("[]");
                } finally {
                       if (jjtc006) {
                         jjtree.closeNodeScope(jjtn006, true);
                       }
                }
                break;
              default:
                jj_la1[11] = jj_gen;
                ;
              }
              t = jj_consume_token(SYMBOL);
                                SimpleNode jjtn007 = new SimpleNode(JJTSYMBOL);
                                boolean jjtc007 = true;
                                jjtree.openNodeScope(jjtn007);
              try {
                                jjtree.closeNodeScope(jjtn007, true);
                                jjtc007 = false;
                               jjtn007.setText(t.image);stream.list.add(t.image);
              } finally {
                                if (jjtc007) {
                                  jjtree.closeNodeScope(jjtn007, true);
                                }
              }
              if (jj_2_5(2147483647) && (getToken(2).kind==C)) {
                jj_consume_token(C);
                jj_consume_token(28);
              } else {
                ;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 27:
                jj_consume_token(27);
                        stream.list.add(",");
                break;
              default:
                jj_la1[12] = jj_gen;
                ;
              }
            } finally {
                  if (jjtc008) {
                    jjtree.closeNodeScope(jjtn008, jjtree.nodeArity() > 1);
                  }
            }
          }
        } finally {
            if (jjtc009) {
              jjtree.closeNodeScope(jjtn009, jjtree.nodeArity() > 0);
            }
        }
        jj_consume_token(C);
              stream.list.add(")");
        jj_consume_token(40);
               stream.list.add("AS");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
                        SimpleNode jjtn010 = new SimpleNode(JJTNUM);
                        boolean jjtc010 = true;
                        jjtree.openNodeScope(jjtn010);
          try {
                        jjtree.closeNodeScope(jjtn010, true);
                        jjtc010 = false;
                       stream.list.add("NUM");
          } finally {
                        if (jjtc010) {
                          jjtree.closeNodeScope(jjtn010, true);
                        }
          }
          break;
        case 43:
          jj_consume_token(43);
                      SimpleNode jjtn011 = new SimpleNode(JJTFLOAT);
                      boolean jjtc011 = true;
                      jjtree.openNodeScope(jjtn011);
          try {
                      jjtree.closeNodeScope(jjtn011, true);
                      jjtc011 = false;
                     stream.list.add("FLOAT");
          } finally {
                      if (jjtc011) {
                        jjtree.closeNodeScope(jjtn011, true);
                      }
          }
          break;
        case 44:
          jj_consume_token(44);
                          SimpleNode jjtn012 = new SimpleNode(JJTCHAR);
                          boolean jjtc012 = true;
                          jjtree.openNodeScope(jjtn012);
          try {
                          jjtree.closeNodeScope(jjtn012, true);
                          jjtc012 = false;
                         stream.list.add("CHARACTER");
          } finally {
                          if (jjtc012) {
                            jjtree.closeNodeScope(jjtn012, true);
                          }
          }
          break;
        case SYMBOL:
          t = jj_consume_token(SYMBOL);
                            SimpleNode jjtn013 = new SimpleNode(JJTSYMBOL);
                            boolean jjtc013 = true;
                            jjtree.openNodeScope(jjtn013);
          try {
                            jjtree.closeNodeScope(jjtn013, true);
                            jjtc013 = false;
                           jjtn013.setText(t.image);stream.list.add(t.image);
          } finally {
                            if (jjtc013) {
                              jjtree.closeNodeScope(jjtn013, true);
                            }
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(30);
               stream.list.add("{");
        body(stream);
        jj_consume_token(31);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               stream.list.add("}");
        break;
      case 40:
        jj_consume_token(40);
               stream.list.add("AS");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
                    SimpleNode jjtn014 = new SimpleNode(JJTNUM);
                    boolean jjtc014 = true;
                    jjtree.openNodeScope(jjtn014);
          try {
                    jjtree.closeNodeScope(jjtn014, true);
                    jjtc014 = false;
                   stream.list.add("NUM");
          } finally {
                    if (jjtc014) {
                      jjtree.closeNodeScope(jjtn014, true);
                    }
          }
          break;
        case 43:
          jj_consume_token(43);
                      SimpleNode jjtn015 = new SimpleNode(JJTFLOAT);
                      boolean jjtc015 = true;
                      jjtree.openNodeScope(jjtn015);
          try {
                      jjtree.closeNodeScope(jjtn015, true);
                      jjtc015 = false;
                     stream.list.add("FLOAT");
          } finally {
                      if (jjtc015) {
                        jjtree.closeNodeScope(jjtn015, true);
                      }
          }
          break;
        case 44:
          jj_consume_token(44);
                          SimpleNode jjtn016 = new SimpleNode(JJTCHAR);
                          boolean jjtc016 = true;
                          jjtree.openNodeScope(jjtn016);
          try {
                          jjtree.closeNodeScope(jjtn016, true);
                          jjtc016 = false;
                         stream.list.add("CHARACTER");
          } finally {
                          if (jjtc016) {
                            jjtree.closeNodeScope(jjtn016, true);
                          }
          }
          break;
        case SYMBOL:
          t = jj_consume_token(SYMBOL);
                            SimpleNode jjtn017 = new SimpleNode(JJTSYMBOL);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
          try {
                            jjtree.closeNodeScope(jjtn017, true);
                            jjtc017 = false;
                           jjtn017.setText(t.image);stream.list.add(t.image);
          } finally {
                            if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017, true);
                            }
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          jj_consume_token(46);
                stream.list.add("[");
          term(stream);
          jj_consume_token(47);
                                                       SimpleNode jjtn018 = new SimpleNode(JJTARRAY);
                                                       boolean jjtc018 = true;
                                                       jjtree.openNodeScope(jjtn018);
          try {
                                                       jjtree.closeNodeScope(jjtn018,  1);
                                                       jjtc018 = false;
                                                      stream.list.add("]");
          } finally {
                                                       if (jjtc018) {
                                                         jjtree.closeNodeScope(jjtn018,  1);
                                                       }
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          jj_consume_token(30);
                stream.list.add("{");
          value(stream);
          jj_consume_token(31);
                                                       stream.list.add("}");
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      case 30:
        jj_consume_token(30);
              stream.list.add("{");
            SimpleNode jjtn019 = new SimpleNode(JJTDEFS);
            boolean jjtc019 = true;
            jjtree.openNodeScope(jjtn019);
        try {
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 41:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_7;
            }
            define(stream);
            jj_consume_token(23);
          }
        } catch (Throwable jjte019) {
            if (jjtc019) {
              jjtree.clearNodeScope(jjtn019);
              jjtc019 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte019 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte019;}
            }
            if (jjte019 instanceof ParseException) {
              {if (true) throw (ParseException)jjte019;}
            }
            {if (true) throw (Error)jjte019;}
        } finally {
            if (jjtc019) {
              jjtree.closeNodeScope(jjtn019, jjtree.nodeArity() > 0);
            }
        }
        jj_consume_token(31);
        jj_consume_token(40);
        jj_consume_token(48);
                                     SimpleNode jjtn020 = new SimpleNode(JJTOBJ);
                                     boolean jjtc020 = true;
                                     jjtree.openNodeScope(jjtn020);
        try {
                                     jjtree.closeNodeScope(jjtn020, true);
                                     jjtc020 = false;
                                    stream.list.add("{");stream.list.add("AS");stream.list.add("OBJ");
        } finally {
                                     if (jjtc020) {
                                       jjtree.closeNodeScope(jjtn020, true);
                                     }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          jj_consume_token(49);
                   stream.list.add("FROM");
          t = jj_consume_token(SYMBOL);
                                                             SimpleNode jjtn021 = new SimpleNode(JJTSYMBOL);
                                                             boolean jjtc021 = true;
                                                             jjtree.openNodeScope(jjtn021);
          try {
                                                             jjtree.closeNodeScope(jjtn021, true);
                                                             jjtc021 = false;
                                                            jjtn021.setText(t.image);stream.list.add(t.image);
          } finally {
                                                             if (jjtc021) {
                                                               jjtree.closeNodeScope(jjtn021, true);
                                                             }
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BulkAcceptValue(tokenstream stream) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
                  SimpleNode jjtn001 = new SimpleNode(JJTNUM);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                 jjtn001.setText(t.image);stream.list.add(t.image);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                 SimpleNode jjtn002 = new SimpleNode(JJTFLOAT);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
      try {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtc002 = false;
                jjtn002.setText(t.image);stream.list.add(t.image);
      } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
      }
      break;
    case MINUS:
      jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        t = jj_consume_token(FLOAT);
                      SimpleNode jjtn003 = new SimpleNode(JJTFLOAT);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
        try {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtc003 = false;
                     jjtn003.setText("-"+t.image);stream.list.add("-"+t.image);
        } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
        }
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                            SimpleNode jjtn004 = new SimpleNode(JJTNUM);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
        try {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                           jjtn004.setText("-"+t.image);stream.list.add("-"+t.image);
        } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                            }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CHARACTER:
      t = jj_consume_token(CHARACTER);
                     SimpleNode jjtn005 = new SimpleNode(JJTCHAR);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
      try {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtc005 = false;
                    jjtn005.setText(t.image);stream.list.add(t.image);
      } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005, true);
                     }
      }
      break;
    case SYMBOL:
      t = jj_consume_token(SYMBOL);
                  SimpleNode jjtn006 = new SimpleNode(JJTSYMBOL);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
      try {
                  jjtree.closeNodeScope(jjtn006, true);
                  jjtc006 = false;
                 jjtn006.setText(t.image);stream.list.add(t.image);
      } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006, true);
                  }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void value(tokenstream stream) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
          SimpleNode jjtn001 = new SimpleNode(JJTNUM);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
         stream.list.add("NUM");
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case 43:
      jj_consume_token(43);
            SimpleNode jjtn002 = new SimpleNode(JJTFLOAT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
           stream.list.add("FLOAT");
      } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      break;
    case 44:
      jj_consume_token(44);
                SimpleNode jjtn003 = new SimpleNode(JJTCHAR);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
      try {
                jjtree.closeNodeScope(jjtn003, true);
                jjtc003 = false;
               stream.list.add("CHARACTER");
      } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                }
      }
      break;
    case SYMBOL:
      t = jj_consume_token(SYMBOL);
                  SimpleNode jjtn004 = new SimpleNode(JJTSYMBOL);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
      try {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                 jjtn004.setText(t.image);stream.list.add(t.image);
      } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expression(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) expre */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      condition(stream);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case NOT:
        case OR:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
        expression2(stream);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void expression2(tokenstream stream) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
                    SimpleNode jjtn001 = new SimpleNode(JJTAND);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                   stream.list.add("AND");
      } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
      }
      break;
    case NOT:
      jj_consume_token(NOT);
                    SimpleNode jjtn002 = new SimpleNode(JJTNOT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                   stream.list.add("NOT");
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    case OR:
      jj_consume_token(OR);
                   SimpleNode jjtn003 = new SimpleNode(JJTOR);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
      try {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                  stream.list.add("OR");
      } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                   }
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    condition(stream);
  }

  final public void condition(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) COND */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term(stream);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
      case LARGER:
      case EQUAL:
      case LE:
      case BE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS:
          jj_consume_token(LESS);
                           SimpleNode jjtn001 = new SimpleNode(JJTLESS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
          try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                          stream.list.add("<");
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
          }
          break;
        case LARGER:
          jj_consume_token(LARGER);
                               SimpleNode jjtn002 = new SimpleNode(JJTLARGER);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
          try {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                              stream.list.add(">");
          } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
          }
          break;
        case EQUAL:
          jj_consume_token(EQUAL);
                              SimpleNode jjtn003 = new SimpleNode(JJTEQUAL);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
          try {
                              jjtree.closeNodeScope(jjtn003, true);
                              jjtc003 = false;
                             stream.list.add("=");
          } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                              }
          }
          break;
        case LE:
          jj_consume_token(LE);
                           SimpleNode jjtn004 = new SimpleNode(JJTLE);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
          try {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtc004 = false;
                          stream.list.add("<=");
          } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004, true);
                           }
          }
          break;
        case BE:
          jj_consume_token(BE);
                           SimpleNode jjtn005 = new SimpleNode(JJTBE);
                           boolean jjtc005 = true;
                           jjtree.openNodeScope(jjtn005);
          try {
                           jjtree.closeNodeScope(jjtn005, true);
                           jjtc005 = false;
                          stream.list.add(">=");
          } finally {
                           if (jjtc005) {
                             jjtree.closeNodeScope(jjtn005, true);
                           }
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term(stream);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void term(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      subterm(stream);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_9;
        }
        term2(stream);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void term2(tokenstream stream) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                     SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                    stream.list.add("+");
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
      break;
    case MINUS:
      jj_consume_token(MINUS);
                     SimpleNode jjtn002 = new SimpleNode(JJTMINUS);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
      try {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                    stream.list.add("-");
      } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    subterm(stream);
  }

  final public void subterm(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) subterm */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      atom(stream);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        subterm2(stream);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void subterm2(tokenstream stream) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
                        SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLY);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                       stream.list.add("*");
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
      }
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
                      SimpleNode jjtn002 = new SimpleNode(JJTDIVIDE);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                     stream.list.add("/");
      } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    atom(stream);
  }

  final public void atom(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) atom */
 SimpleNode jjtn000 = new SimpleNode(JJTATOM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (getToken(2).kind == B) {
        call(stream);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case B:
          jj_consume_token(B);
      stream.list.add("(");
          expression(stream);
          jj_consume_token(C);
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                    stream.list.add(")");
          break;
        case MINUS:
        case NUMBER:
        case SYMBOL:
        case CHARACTER:
        case FLOAT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            t = jj_consume_token(NUMBER);
                          SimpleNode jjtn001 = new SimpleNode(JJTNUM);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
            try {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                         jjtn001.setText(t.image);stream.list.add(t.image);
            } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
            }
            break;
          case FLOAT:
            t = jj_consume_token(FLOAT);
                         SimpleNode jjtn002 = new SimpleNode(JJTFLOAT);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
            try {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                        jjtn002.setText(t.image);stream.list.add(t.image);
            } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
            }
            break;
          case MINUS:
            jj_consume_token(MINUS);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FLOAT:
              t = jj_consume_token(FLOAT);
                              SimpleNode jjtn003 = new SimpleNode(JJTFLOAT);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
              try {
                              jjtree.closeNodeScope(jjtn003, true);
                              jjtc003 = false;
                             jjtn003.setText("-"+t.image);stream.list.add("-"+t.image);
              } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                              }
              }
              break;
            case NUMBER:
              t = jj_consume_token(NUMBER);
                                SimpleNode jjtn004 = new SimpleNode(JJTNUM);
                                boolean jjtc004 = true;
                                jjtree.openNodeScope(jjtn004);
              try {
                                jjtree.closeNodeScope(jjtn004, true);
                                jjtc004 = false;
                               jjtn004.setText("-"+t.image);stream.list.add("-"+t.image);
              } finally {
                                if (jjtc004) {
                                  jjtree.closeNodeScope(jjtn004, true);
                                }
              }
              break;
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case CHARACTER:
            t = jj_consume_token(CHARACTER);
                             SimpleNode jjtn005 = new SimpleNode(JJTCHAR);
                             boolean jjtc005 = true;
                             jjtree.openNodeScope(jjtn005);
            try {
                             jjtree.closeNodeScope(jjtn005, true);
                             jjtc005 = false;
                            jjtn005.setText(t.image);stream.list.add(t.image);
            } finally {
                             if (jjtc005) {
                               jjtree.closeNodeScope(jjtn005, true);
                             }
            }
            break;
          case SYMBOL:
            variable(stream);
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void variable(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) VAR */
 SimpleNode jjtn000 = new SimpleNode(JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
                          SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                         jjtn001.setText(t.image);stream.list.add(t.image);
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
              stream.list.add("[");
        term(stream);
        jj_consume_token(47);
                                                     SimpleNode jjtn002 = new SimpleNode(JJTARRAY);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
        try {
                                                     jjtree.closeNodeScope(jjtn002,  1);
                                                     jjtc002 = false;
                                                    stream.list.add("]");
        } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002,  1);
                                                     }
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 26:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_11;
        }
        symbol2(stream);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void symbol2(tokenstream stream) throws ParseException {
 /*@bgen(jjtree) pointer */
 SimpleNode jjtn000 = new SimpleNode(JJTPOINTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(26);
               stream.list.add("->");
      if (getToken(2).kind == B) {
        call(stream);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOL:
          t = jj_consume_token(SYMBOL);
                           SimpleNode jjtn001 = new SimpleNode(JJTSYMBOL);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
          try {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                          jjtn001.setText(t.image);stream.list.add(t.image);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
          }
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
                    stream.list.add("[");
        term(stream);
        jj_consume_token(47);
                                                           SimpleNode jjtn002 = new SimpleNode(JJTARRAY);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
        try {
                                                           jjtree.closeNodeScope(jjtn002,  1);
                                                           jjtc002 = false;
                                                          stream.list.add("]");
        } finally {
                                                           if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002,  1);
                                                           }
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind == B;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(B)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x3080000,0x1080000,0x1080000,0x4000000,0x8000000,0x100000,0x40000000,0x8000000,0x80000,0x80000,0x0,0x8000000,0x80000,0x80000,0x0,0x40000000,0x0,0x0,0x40400000,0x220000,0x3a0040,0x80000,0xe00,0xe00,0x1f000,0x1f000,0x60,0x60,0x180,0x180,0x220000,0x3a0040,0x7a0040,0x0,0x4000000,0x80000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2af,0x2af,0x2af,0x0,0x0,0x0,0x0,0x0,0x1c00,0x1c00,0x2000,0x0,0x1c00,0x1c00,0x4000,0x0,0x200,0x20000,0x100,0x0,0x0,0x1c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
